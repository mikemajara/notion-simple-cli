#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var client = require('@notionhq/client');
var _ = require('lodash');
var fs = require('fs');
var prettier = require('prettier');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var ___default = /*#__PURE__*/_interopDefaultLegacy(_);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var prettier__default = /*#__PURE__*/_interopDefaultLegacy(prettier);

class NotionClient {
  constructor(notionToken) {
    console.log(`Creating Notion client with token ${notionToken}`);
    this.notion = new client.Client({
      auth: notionToken
    });
  }
  getCollection = async databaseId => {
    console.log(`Retrieving collection ${databaseId}`);
    const response = await this.notion.databases.retrieve({
      database_id: databaseId
    });
    return response;
  };
  getCollectionPages = async (databaseId, query) => {
    const response = await this.notion.databases.query({
      database_id: databaseId,
      ...query
    });
    return response;
  };
  getPage = async () => {
    throw Error(`undefined method`);
  };
  getPageChildren = async () => {
    throw Error(`undefined method`);
  };
  getBlock = async () => {
    throw Error(`undefined method`);
  };
  getBlockChildren = async () => {
    throw Error(`undefined method`);
  };
}

class TextStyle {
  constructor(annotations) {
    this.fontWeight = annotations.bold ? 'bold' : null;
    this.fontStyle = annotations.italic ? 'italic' : null;
    this.textDecoration = [annotations.strikethrough && 'line-through', annotations.underline && 'underline'].join(' ');
    if (annotations.color.includes('background')) {
      this.backgroundColor = annotations.color.replace('_background', '');
    } else {
      this.color = annotations.color;
    }
    this.code = annotations.code;
  }
}
class RichText {
  constructor(richTextArray) {
    this.plainText = richTextArray.map(e => e.plain_text).join('');
    this.richText = richTextArray.map(e => new Text(e));
  }
}
class Text {
  constructor(richText) {
    this.text = richText.plain_text;
    this.href = richText.href;
    this.style = new TextStyle(richText.annotations);
  }
}

class Select {
  constructor(property) {
    this.text = property.name;
    this.color = property.color;
  }
}

const NODE_MODULE_PREFIX = './node_modules/nosimcli/'; // use when testing installed

const DIR_CLASSES = NODE_MODULE_PREFIX + 'src/notion/class';
const CONSTRUCTOR = `
  constructor(pageObject: PageObjectResponse | PartialPageObjectResponse) {
    super(pageObject);
  }
`;
const WARNING = `
  // This file was autogenerated by notion-simple-cli
  // don't edit below this line\n`;
const BASE_IMPORT_STATEMENTS = fs__default["default"].readFileSync(`${DIR_CLASSES}/base-imports.ts`);
const TYPE_MAP = {
  created_time: 'Date',
  last_edited_time: 'Date',
  date: 'Date',
  rich_text: 'RichText',
  title: 'RichText',
  number: 'number',
  select: 'Select',
  multi_select: 'Array<Select>',
  checkbox: 'boolean'
};

/**
 * Given the properties of a collection, it maps their types to a
 * Typescript type string definition.
 * @param property Property
 * @returns string
 */
function mapCollectionProperties(propertyConfig) {
  return ___default["default"].join(___default["default"].map(propertyConfig, property => `${___default["default"].camelCase(property.name)}: ${TYPE_MAP[property.type]};`), '\n');
}
class Collection {
  constructor(colObj) {
    this.id = colObj.id;
    this.createdTime = new Date(colObj.created_time);
    this.lastEditedTime = new Date(colObj.last_edited_time);
    this.url = colObj.url;
    this.title = new RichText(colObj.title);
    this.description = new RichText(colObj.description);
    this.properties = colObj.properties;
  }
  getClassName = (name = '', prefix = '') => {
    let className = name !== '' ? name : this.title.plainText;
    return ___default["default"].upperFirst(prefix) + ___default["default"].upperFirst(___default["default"].camelCase(className));
  };
  getFileName = (name = '', prefix = '') => {
    return ___default["default"].kebabCase(this.getClassName(name, prefix)) + '.ts';
  };
  genClassFileString = (name = '', prefix = '') => {
    let className = this.getClassName(name, prefix);
    let classDefinition = `
    ${WARNING}
    ${BASE_IMPORT_STATEMENTS}
    export class ${className} extends BaseCollectionPage {
      ${mapCollectionProperties(this.properties)}

      ${CONSTRUCTOR}
    };`;
    classDefinition = prettier__default["default"].format(classDefinition, {
      parser: 'typescript'
    });
    return classDefinition;
  };
}

exports.Collection = Collection;
exports.NotionClient = NotionClient;
exports.RichText = RichText;
exports.Select = Select;
exports.Text = Text;
exports.TextStyle = TextStyle;
