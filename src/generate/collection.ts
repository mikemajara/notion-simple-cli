import _ from 'lodash';
import fs from 'fs';
import path from 'path';
import prettier from 'prettier';
import { RichText } from '../notion/class';
import {
  DatabaseObjectResponse,
  DatabasePropertyConfigResponse,
} from '../notion/class/notion-api-endpoints';

console.log(`__filename`, __filename);
console.log(`__dirname`, __dirname);
console.log(`process.cwd()`, process.cwd());

const DIR_CLASSES = path.join(__dirname, '../src/notion/class');

const CONSTRUCTOR = `
  constructor(pageObject: PageObjectResponse | PartialPageObjectResponse) {
    super(pageObject);
  }
`;

const WARNING = `
  // This file was autogenerated by notion-simple-cli
  // don't edit below this line\n`;
const BASE_IMPORT_STATEMENTS = fs.readFileSync(
  `${DIR_CLASSES}/base-imports.ts`
);

const TYPE_MAP: Record<string, any> = {
  created_time: 'string',
  last_edited_time: 'string',
  date: 'string',
  rich_text: 'RichText',
  title: 'RichText',
  number: 'number',
  select: 'Select',
  multi_select: 'Array<Select>',
  checkbox: 'boolean',
};

/**
 * Given the properties of a collection, it maps their types to a
 * Typescript type string definition.
 * @param property Property
 * @returns string
 */
function mapCollectionProperties(
  propertyConfig: Record<string, DatabasePropertyConfigResponse>
) {
  return _.join(
    _.map(
      propertyConfig,
      (property) => `${_.camelCase(property.name)}: ${TYPE_MAP[property.type]};`
    ),
    '\n'
  );
}

export class Collection {
  id: string;
  createdTime: string;
  lastEditedTime: string;
  title: RichText;
  description: RichText;
  url: string;
  properties: Record<string, DatabasePropertyConfigResponse>;

  constructor(colObj: DatabaseObjectResponse) {
    this.id = colObj.id;
    this.createdTime = colObj.created_time;
    this.lastEditedTime = colObj.last_edited_time;
    this.url = colObj.url;
    this.title = new RichText(colObj.title);
    this.description = new RichText(colObj.description);
    this.properties = colObj.properties;
  }

  getClassName = (name: string = '', prefix: string = ''): string => {
    let className = name !== '' ? name : this.title.plainText;
    return _.upperFirst(prefix) + _.upperFirst(_.camelCase(className));
  };

  getFileName = (name: string = '', prefix: string = ''): string => {
    return _.kebabCase(this.getClassName(name, prefix)) + '.ts';
  };

  genClassFileString = (name: string = '', prefix = ''): string => {
    let className = this.getClassName(name, prefix);
    let classDefinition = `
    ${WARNING}
    ${BASE_IMPORT_STATEMENTS}
    export class ${className} extends BaseCollectionPage {
      ${mapCollectionProperties(this.properties)}

      ${CONSTRUCTOR}
    };`;
    classDefinition = prettier.format(classDefinition, {
      parser: 'typescript',
    });
    return classDefinition;
  };
}
